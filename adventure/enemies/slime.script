local log = require "utils.log"
local broadcaster = require "utils.broadcaster"
local komponent = require "komponent.komponent"

local follow_and_attack = require "adventure.components.follow_and_attack"
local hitbox = require "adventure.components.hitbox"
local health = require "adventure.components.health"
local attack = require "adventure.components.attack"
local activator = require "adventure.components.activator"
local platypus = require "adventure.components.platypus"
local animator = require "adventure.components.animator"
local death = require "adventure.components.death"
local damageblink = require "adventure.components.damageblink"
local damagepushback = require "adventure.components.damagepushback"
local stately = require "adventure.components.stately"
local soundplayer = require "adventure.components.soundplayer"

local events = require "adventure.events"
local sounds = require "adventure.sounds.sounds"

go.property("awake", false)
go.property("speed", 20)
go.property("health", 2)
go.property("log_enabled", false)

local STATE_SLEEP = hash("sleep")
local STATE_MOVE = hash("move")
local STATE_ATTACK = hash("attack")
local STATE_DAMAGE = hash("damage")
local STATE_DEAD = hash("dead")


function init(self)
	log.set_enabled(self.log_enabled)
	log("init()")

	-- set up component handler and event broadcaster
	self.komponent = komponent.create()
	local broadcast = broadcaster.create()
	broadcast.listen(function(id, ...)
		self.komponent.on_event(id, ...)
	end)

	-- create the components used by this enemy
	local components = {
		activator = activator.create(broadcast, hash("activator")),
		hitbox = hitbox.create(broadcast, "#hitbox"),
		health = health.create(broadcast, self.health),
		follow_and_attack = follow_and_attack.create(broadcast, 10, "player", self.speed),
		attack = attack.create(broadcast, 0.75),
		platypus = platypus.create(broadcast, {
			rays = { left = 3, right = 4, top = 3, bottom = 5 }
		}),
		animator = animator.create("#sprite", {
			[events.MOVE_LEFT] = hash("slime_walk"),
			[events.MOVE_RIGHT] = hash("slime_walk"),
			[events.ATTACK] = hash("slime_attack"),
			[events.DEATH] = hash("explosion"),
		}),
		death = death.create(0.2),
		damageblink = damageblink.create("#sprite", 0.15),
		damagepushback = damagepushback.create(0.15, 10),
		stately = stately.create(self.komponent.change_group, STATE_SLEEP, {
			stately.transition(events.ACTIVATE, STATE_SLEEP, STATE_MOVE),
			stately.transition(events.ATTACK, STATE_MOVE, STATE_ATTACK),
			stately.transition(events.ATTACK_DONE, STATE_ATTACK, STATE_MOVE),
			stately.transition(events.HIT, STATE_SLEEP, STATE_DAMAGE),
			stately.transition(events.HIT, STATE_MOVE, STATE_DAMAGE),
			stately.transition(events.HIT, STATE_ATTACK, STATE_DAMAGE),
			stately.transition(events.DEATH, STATE_DAMAGE, STATE_DEAD),
			stately.transition(events.ALIVE, STATE_DAMAGE, STATE_MOVE),
		}),
		soundplayer = soundplayer.create({})
	}

	-- create component groups
	self.komponent.group(STATE_SLEEP, components.stately, components.animator, components.activator, components.hitbox, components.health)
	self.komponent.group(STATE_MOVE, components.stately, components.animator, components.soundplayer, components.follow_and_attack, components.hitbox, components.health, components.attack, components.platypus)
	self.komponent.group(STATE_ATTACK, components.stately, components.animator, components.soundplayer, components.hitbox, components.health)
	self.komponent.group(STATE_DAMAGE, components.stately, components.animator, components.soundplayer, components.hitbox, components.health, components.damageblink, components.damagepushback, components.death)
	self.komponent.group(STATE_DEAD, components.stately, components.animator)

	self.komponent.init()
end

function final(self)
	self.komponent.final()
end

function update(self, dt)
	self.komponent.update(dt)
end

function on_message(self, message_id, message, sender)
	self.komponent.on_message(message_id, message, sender)
end
